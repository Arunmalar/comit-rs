version: 2.1
jobs:
  build:
    working_directory: ~/comit
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      RUST_TEST_THREADS: "8"
    steps:
      - checkout
      - setup_system
      - print_current_versions
      - restore_cache:
          keys:
            - cargo-{{ .Branch }}-{{ checksum "rust-toolchain" }}
            - cargo-{{ .Branch }}-
            - cargo
      - restore_cache:
          keys:
            # Find a cache corresponding to this specific Cargo.lock checksum
            # If we can't find one, don't restore anything. This is slower for build where we change the lock file but at least it prevents us from piling up old stuff in the cached target/ folder.
            - target-folder-{{ checksum "Cargo.lock" }}
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "api_tests/yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
      - setup_rust
      - run:
          name: Install cargo tools
          command: which cargo-make || cargo install cargo-make
      - run:
          name: Build using cargo make
          command: cargo make ci
      - store_artifacts:
          path: api_tests/log
      - save_cache:
          paths:
            - ~/.cargo
          key: cargo-{{ .Branch }}-{{ checksum "rust-toolchain" }}
      - save_cache:
          key: target-folder-{{ checksum "Cargo.lock" }}
          paths:
            - "./target"
      - save_cache:
          paths:
            - ~/.cache/yarn
            - api_tests/node_modules
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "api_tests/yarn.lock" }}

commands:
  setup_system:
    steps:
      - run:
          name:  "Setup system environment"
          command: |
            rm -rf /opt/circleci/.nvm
            curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            curl -sL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            echo "deb https://deb.nodesource.com/node_10.x/ trusty main" | sudo tee /etc/apt/sources.list.d/node_10.list
            sudo apt-get update
            sudo apt-get install -y nodejs=10.* yarn libzmq3-dev
  setup_rust:
    steps:
      - run:
          name:  "Setup rust environment"
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(< rust-toolchain) && source $HOME/.cargo/env

            # Define variables that need interpolation
            # As CircleCI starts a new shell for each `run` declaration, we need to export cargo home to $BASH_ENV

            echo 'export PATH=$HOME/.cargo/bin:$HOME/.local/bin:$PATH' >> $BASH_ENV
  print_current_versions:
    steps:
      - run:
          name: "Prints version for rust, etc"
          command: |
            echo 'node --version' $(node --version)
            echo 'yarn --version' $(yarn --version)
            echo 'rustc --version' $(rustc --version)
            echo 'cargo --version' $(cargo --version)
            echo "pwd $(pwd)"
            echo "whomai $(whoami)"
            echo "CARGO_HOME" $CARGO_HOME
            echo "RUSTUP_HOME" $RUSTUP_HOME
